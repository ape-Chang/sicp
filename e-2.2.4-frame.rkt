#lang racket

(define (frame-coor-map frame)
  (lambda (v)
    (add-vect (origin-frame frame)
              (add-vect (scale-vect (xcor-vect v)
                                    (edge1-frame frame))
                        (scale-vect (ycor-vect v)
                                    (edge2-frame frame))))))
;;
(define (make-vect x y) (cons x y))
(define (xcor-vect v) (car v))
(define (ycor-vect v) (cdr v))
(define (add-vect v u)
  (make-vect (+ (xcor-vect v)
                (xcor-vect u))
             (+ (ycor-vect v)
                (ycor-vect u))))
(define (sub-vect v u)
  (make-vect (- (xcor-vect v)
                (xcor-vect u))
             (- (ycor-vect v)
                (ycor-vect u))))
(define (scale-vect k v)
  (make-vect (* k (xcor-vect v))
             (* k (ycor-vect v))))
;;
(define (make-frame origin edge1 edge2)
  (list origin edge1 edge2))
(define (origin-frame frame)
  (car frame))
(define (edge1-frame frame)
  (car (cdr frame)))
(define (edge2-frame frame)
  (car (cdr (cdr frame))))