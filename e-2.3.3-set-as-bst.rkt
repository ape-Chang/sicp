#lang racket

(define (entry tree) (car tree))
(define (left-branch tree) (cadr tree))
(define (right-branch tree) (caddr tree))
(define (make-tree entry left right)
  (list entry left right))
;;
(define (element-of-set? x set)
  (cond ((null? set) #f)
        ((= x (entry set)) #t)
        ((< x (entry set)) (element-of-set? x (left-branch set)))
        ((> x (entry set)) (element-of-set? x (right-branch set)))))

(define (adjoin-set x set)
  (cond ((null? set) (make-tree x '() '()))
        ((= x (entry set)) set)
        ((< x (entry set)) (make-tree (entry set)
                                      (adjoin-set x (left-branch set))
                                      (right-branch set)))
        ((> x (entry set)) (make-tree (entry set)
                                      (left-branch set)
                                      (adjoin-set x (right-branch set))))))
;; p-2.63, in order
(define (tree->list-1 tree)
  (if (null? tree)
      '()
      (append (tree->list-1 (left-branch tree))
              (cons (entry tree)
                    (tree->list-1 (right-branch tree))))))

(define (tree->list-2 tree)
  (define (copy-to-list tree result-list)
    (if (null? tree)
        result-list
        (copy-to-list (left-branch tree)
                      (cons (entry tree)
                            (copy-to-list (right-branch tree) result-list)))))
  (copy-to-list tree '()))
;;
(define tree->list tree->list-1)
;;
(define (list->tree elements)
  (car (partial-tree elements (length elements))))
(define (partial-tree elements n)
  (if (= n 0)
      (cons '() elements)
      (let ((left-size (quotient (- n 1) 2)))
        (let ((left-result (partial-tree elements left-size)))
          (let ((left-tree (car left-result))
                (non-left-elements (cdr left-result))
                (right-size (- n left-size 1)))
            (let ((this-entry (car non-left-elements))
                  (right-result (partial-tree (cdr non-left-elements) right-size)))
              (let ((right-tree (car right-result))
                    (remaining-elements (cdr right-result)))
                (cons (make-tree this-entry left-tree right-tree)
                      remaining-elements))))))))
;;
(define (union-set set1 set2)
  (let ((list1 (tree->list set1))
        (list2 (tree->list set2)))
    (define (recur l1 l2)
      (cond ((null? l1) l2)
            ((null? l2) l1)
            (else
             (let ((x1 (car l1))
                   (x2 (car l2)))
               (cond ((= x1 x2) (cons x1 (recur (cdr l1) (cdr l2))))
                     ((> x1 x2) (cons x2 (recur l1 (cdr l2))))
                     ((< x1 x2) (cons x1 (recur (cdr l1) l2))))))))
    (list->tree (recur list1 list2))))
;;
(define (intersection-set set1 set2)
  (let ((list1 (tree->list set1))
        (list2 (tree->list set2)))
    (define (recur l1 l2)
      (cond ((or (null? l1) (null? l2)) '())
            (else
             (let ((x1 (car l1))
                   (x2 (car l2)))
               (cond ((= x1 x2) (cons x1 (recur (cdr l1) (cdr l2))))
                     ((> x1 x2) (recur l1 (cdr l2)))
                     ((< x1 x2) (recur (cdr l1) l2)))))))
    (list->tree (recur list1 list2))))
;;