#lang racket

(define (make-leaf symbol weight)
  (list 'leaf symbol weight))
(define (leaf? object)
  (eq? (car object) 'leaf))
(define (symbol-leaf leaf) (cadr leaf))
(define (weight-leaf leaf) (caddr leaf))
;;
(define (make-code-tree left right)
  (list left
        right
        (append (symbols left) (symbols right))
        (+ (weight left) (weight right))))
(define (left-branch tree) (car tree))
(define (right-branch tree) (cadr tree))
(define (symbols object)
  (if (leaf? object)
      (list (symbol-leaf object))
      (caddr object)))
(define (weight object)
  (if (leaf? object)
      (weight-leaf object)
      (cadddr object)))
;;
(define (decode bits tree)
  (define (decode-1 bits current-branch)
    (if (null? bits)
        '()
        (let ((next-branch (choose-branch (car bits) current-branch)))
          (if (leaf? next-branch)
              (cons (symbol-leaf next-branch)
                    (decode-1 (cdr bits) tree))
              (decode-1 (cdr bits) next-branch)))))
  (decode-1 bits tree))
(define (choose-branch bit branch)
  (cond ((= bit 0) (left-branch branch))
        ((= bit 1) (right-branch branch))
        (else (error "bad bit -- CHOOSE-BRANCH" bit))))
;;
(define (adjoin-set x set)
  (cond ((null? set) (list x))
        ((< (weight x) (weight (car set))) (cons x set))
        (else (cons (car set)
                     (adjoin-set x (cdr set))))))
(define (make-leaf-set pairs)
  (if (null? pairs)
      '()
      (let ((pair (car pairs)))
        (adjoin-set (make-leaf (car pair)
                               (cadr pair))
                    (make-leaf-set (cdr pairs))))))
;;
(make-leaf-set (list '(A 4) '(B 2) '(C 1) '(D 1)))
;; p-2.67
(define sample-tree
  (make-code-tree (make-leaf 'A 4)
                  (make-code-tree (make-leaf 'B 2)
                                  (make-code-tree (make-leaf 'C 1)
                                                  (make-leaf 'D 1)))))
(define sample-message '(0 1 1 0 0 1 0 1 0 1 1 1 0))
(decode sample-message sample-tree)
;; p-2.68
(define (element-of-set? x set)
  (cond ((null? set) #f)
        ((eq? x (car set))  #t)
        (else (element-of-set? x (cdr set)))))
(define (encode message tree)
  (if (null? message)
      '()
      (append (encode-symbol (car message) tree)
              (encode (cdr message) tree))))
(define (encode-symbol symbol tree)
  (define (iterative symbol branch)
    (if (leaf? branch)
        '()
        (let ((left (left-branch branch))
              (right (right-branch branch)))
          (cond ((element-of-set? symbol (symbols left)) (cons '0 (iterative symbol left)))
                ((element-of-set? symbol (symbols right)) (cons '1 (iterative symbol right)))
                (else (error "bad symbol -- " symbol))))))
  (iterative symbol tree))
(encode '(A C A B B D A) sample-tree)
;; p-2.69
(define (generate-huffman-tree pairs)
  (successive-merge (make-leaf-set pairs)))
(define (successive-merge nodes)
  (if (null? (cdr nodes))
      (car nodes)
      (successive-merge (adjoin-set (make-code-tree (car nodes)
                                                    (cadr nodes))
                                    (cddr nodes)))))
(encode '(A C A B B D A) (generate-huffman-tree (list '(A 4) '(B 2) '(C 1) '(D 1))))
;; p-2.70
(define huffman-tree (generate-huffman-tree (list '(a 2) '(na 16) '(boom 1) '(sha 3) '(get 2) '(yip 9) '(job 2) '(wah 1))))
(encode '(get a job) huffman-tree)
(encode '(sha na na na na na na na) huffman-tree)
(encode '(wah yip yip yip yip yip yip yip yip yip) huffman-tree)
(encode '(sha boom) huffman-tree)