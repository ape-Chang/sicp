#lang racket

(define (attach-tag type-tag contents) (cons type-tag contents))
(define (type-tag datum)
  (if (pair? datum)
      (car datum)
      (error "Bad tagged datum --- TYPE-TAG" datum)))
(define (contents datum)
  (if (pair? datum)
      (cdr datum)
      (error "Bad tagged datum --- CONTENTS" datum)))

(define (rectangular? z)
  (eq? (type-tag z) 'rectangular))

(define (polar? z)
  (eq? (type-tag z) 'polar))
;; rectangular
(define (real-part-rectangular z) (car z))
(define (imag-part-rectangular z) (cdr z))
(define (magnitude-part-rectangular z)
  (sqrt (+ (real-part-rectangular z)
           (imag-part-rectangular z))))
(define (angle-part-rectangular z)
  (atan (imag-part-rectangular z)
        (real-part-rectangular z)))
(define (make-from-real-imag-rectangular x y)
  (attach-tag 'rectangular (cons x y)))
(define (make-from-mag-ang-rectangular r a)
  (make-from-real-imag-rectangular (* r (cos a))
                                   (* r (sin a))))
;; polar
(define (magnitude-part-polar z) (car z))
(define (angle-part-polar z) (cdr z))
(define (real-part-polar z)
  (* (magnitude-part-polar z)
     (cos (angle-part-polar z))))
(define (imag-part-polar z)
  (* (magnitude-part-polar z)
     (sin (angle-part-polar z))))
(define (make-from-mag-ang-polar r a)
  (attach-tag 'polar (cons r a)))
(define (make-from-real-imag-polar x y)
  (make-from-mag-ang-polar (sqrt (* x x) (* y y))
                           (atan y x)))
;;
(define (real-part z)
  (cond ((rectangular? z) (real-part-rectangular (contents z)))
        ((polar? z) (real-part-polar (contents z)))
        (else (error "Unknown type -- REAL-PART" z))))
(define (imag-part z)
  (cond ((rectangular? z) (imag-part-rectangular (contents z)))
        ((polar? z) (imag-part-polar (contents z)))
        (else (error "Unknown type -- IMAG-PART" z))))
(define (magnitude-part z)
  (cond ((rectangular? z) (magnitude-part-rectangular z))
        ((polar? z) (magnitude-part-polar z))
        (else (error "Unknown type -- MAGNITUDE-PART" z))))
(define (angle-part z)
  (cond ((rectangular? z) (angle-part-rectangular z))
        ((polar? z) (angle-part-polar z))
        (else (error "Unknown type -- ANGLE-PART" z))))
;;
(define make-from-real-imag make-from-real-imag-rectangular)
(define make-from-mag-ang make-from-mag-ang-polar)
(define (add-complex z1 z2) (make-from-real-imag (+ (real-part z1)
                                                    (real-part z2))
                                                 (+ (imag-part z1)
                                                    (imag-part z2))))
(define (sub-complex z1 z2) (make-from-real-imag (- (real-part z1)
                                                    (real-part z2))
                                                 (- (imag-part z1)
                                                    (imag-part z2))))
(define (mul-complex z1 z2) (make-from-mag-ang (* (magnitude-part z1)
                                                  (magnitude-part z2))
                                               (+ (angle-part z1)
                                                  (angle-part z2))))
(define (div-complex z1 z2) (make-from-mag-ang (/ (magnitude-part z1)
                                                  (magnitude-part z2))
                                               (- (angle-part z1)
                                                  (angle-part z2))))