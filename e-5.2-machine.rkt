#lang racket
;; register
(define (make-register name)
  (let ((contents '*unassigned*))
    (define (dispatch message)
      (cond ((eq? message 'get) contents)
            ((eq? message 'set) (lambda (value) (set! contents value)))
            (else (error "Unknown request -- REGISTER" message))))
    dispatch))
(define (get-contents register) (register 'get))
(define (set-contents! register value) ((register 'set) value))
;; stack
(define (make-stack)
  (let ((stack '()))
    (define (push item)
      (set! stack (cons item stack)))
    (define (pop)
      (if (null? stack)
          (error "Empty stack -- POP")
          (let ((top (car stack)))
            (set! stack (cdr stack))
            top)))
    (define (initialize)
      (set! stack '())
      'done)

    (define (dispatch message)
      (cond ((eq? message 'push) push)
            ((eq? message 'pop) pop)
            ((eq? message 'initialize) initialize)
            (else (error "Unknown request -- STACK" message))))

    dispatch))
(define (pop stack) (stack 'pop))
(define (push stack item) ((stack 'push) item))
;; machine
(define (make-machine register-names operations program)
  (let ((machine (make-new-machine)))
    (for-each (lambda (register-name) ((machine 'allocate-register) register-name))
              register-names)
    ((machine 'install-operations) operations)
    ((machine 'install-instructions) (assemble program machine))
    machine))
;; new-machine
(define (make-new-machine)
  (let ((pc (make-register 'pc))
        (flag (make-register 'flag))
        (stack (make-stack))
        (instructions '()))

    (let ((operations (list (list 'initialize-stack (lambda () (stack 'initialize)))))
          (registers (list (list 'pc pc)
                           (list 'flag flag))))

      (define (lookup-register name)
        (define (do-lookup name registers)
          (if (null? registers)
              (error "Unknown register: " name)
              (let ((first (car registers))
                    (rest (cdr registers)))
                (if (eq? name (car first))
                    (cadr first)
                    (do-lookup name rest)))))
        (do-lookup name registers))

      (define (allocate-register name)
        (define (in? name registers)
          (if (null? registers)
              #f
              (let ((first (car registers))
                    (rest (cdr registers)))
                (if (eq? name (car first))
                    #t
                    (in? name rest)))))
        (if (in? name registers)
            (error "Multiply defined register: " name)
            (set! registers (cons (list name (make-register name))
                                  registers))))

      (define (execute)
        (let ((insts (get-contents pc)))
          (if (null? insts)
              'done
              (begin ((execute-instruction (car insts)))
                     (execute)))))

      (define (start)
        (set-contents! pc instructions)
        (execute))

      (define (install-instruction)
        (lambda (insts) (set! instructions insts)))

      (define (install-operation)
        (lambda (ops) (set! operations (append operations ops))))

      (lambda (message)
        (cond ((eq? message 'start) start)
              ((eq? message 'install-instrunction) install-instruction)
              ((eq? message 'install-operation) install-operation)
              ((eq? message 'allocate-register) allocate-register)
              ((eq? message 'get-register) lookup-register)
              ((eq? message 'stack) stack)
              ((eq? message 'operations) operations)
              (else (error "Unknown request -- MACHINE" message)))))))

(define (start machine) (machine 'start))
(define (get-register machine name) ((machine 'get-register) name))
(define (get-register-contents machine name)
  (get-contents (get-register machine name)))
(define (set-register-contents! machine name value)
  (set-contents! (get-register machine name) value))
;; TODO 
(define (execute-instruction inst) '())
(define (assemble program machine) '())